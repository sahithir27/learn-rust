{"$message_type":"diagnostic","message":"the trait bound `TicketNewError: AmbiguousIfMoreThanOne<Token>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":3224,"byte_end":3238,"line_start":104,"line_end":104,"column_start":22,"column_end":36,"is_primary":true,"text":[{"text":"    assert_impl_one!(TicketNewError: std::error::Error);","highlight_start":22,"highlight_end":36}],"label":"the trait `std::error::Error` is not implemented for `TicketNewError`, which is required by `TicketNewError: AmbiguousIfMoreThanOne<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required for `TicketNewError` to implement `AmbiguousIfMoreThanOne<Token>`","code":null,"level":"note","spans":[{"file_name":"/Users/sahithigaddam/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/src/assert_impl.rs","byte_start":2119,"byte_end":2121,"line_start":73,"line_end":73,"column_start":34,"column_end":36,"is_primary":false,"text":[{"text":"                impl<T: ?Sized + $t> AmbiguousIfMoreThanOne<Token> for T {}","highlight_start":34,"highlight_end":36}],"label":"unsatisfied trait bound introduced here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":3207,"byte_end":3258,"line_start":104,"line_end":104,"column_start":5,"column_end":56,"is_primary":false,"text":[{"text":"    assert_impl_one!(TicketNewError: std::error::Error);","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_impl_one!","def_site_span":{"file_name":"/Users/sahithigaddam/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/src/assert_impl.rs","byte_start":1445,"byte_end":1473,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! assert_impl_one {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/sahithigaddam/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/src/assert_impl.rs","byte_start":2123,"byte_end":2152,"line_start":73,"line_end":73,"column_start":38,"column_end":67,"is_primary":true,"text":[{"text":"                impl<T: ?Sized + $t> AmbiguousIfMoreThanOne<Token> for T {}","highlight_start":38,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":3207,"byte_end":3258,"line_start":104,"line_end":104,"column_start":5,"column_end":56,"is_primary":false,"text":[{"text":"    assert_impl_one!(TicketNewError: std::error::Error);","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_impl_one!","def_site_span":{"file_name":"/Users/sahithigaddam/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/src/assert_impl.rs","byte_start":1445,"byte_end":1473,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! assert_impl_one {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/sahithigaddam/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/src/assert_impl.rs","byte_start":2157,"byte_end":2158,"line_start":73,"line_end":73,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                impl<T: ?Sized + $t> AmbiguousIfMoreThanOne<Token> for T {}","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":3207,"byte_end":3258,"line_start":104,"line_end":104,"column_start":5,"column_end":56,"is_primary":false,"text":[{"text":"    assert_impl_one!(TicketNewError: std::error::Error);","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_impl_one!","def_site_span":{"file_name":"/Users/sahithigaddam/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/src/assert_impl.rs","byte_start":1445,"byte_end":1473,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! assert_impl_one {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `TicketNewError: AmbiguousIfMoreThanOne<Token>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexercises/05_ticket_v2/09_error_trait/src/lib.rs:104:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_impl_one!(TicketNewError: std::error::Error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `std::error::Error` is not implemented for `TicketNewError`, which is required by `TicketNewError: AmbiguousIfMoreThanOne<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `TicketNewError` to implement `AmbiguousIfMoreThanOne<Token>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexercises/05_ticket_v2/09_error_trait/src/lib.rs:104:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_impl_one!(TicketNewError: std::error::Error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_impl_one` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`TicketNewError` doesn't implement `std::fmt::Display`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":3148,"byte_end":3167,"line_start":101,"line_end":101,"column_start":34,"column_end":53,"is_primary":true,"text":[{"text":"        assert_eq!(format!(\"{}\", ticket.unwrap_err()), \"Title cannot be empty\");","highlight_start":34,"highlight_end":53}],"label":"`TicketNewError` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/sahithigaddam/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/macros.rs","byte_start":4642,"byte_end":4682,"line_start":128,"line_end":128,"column_start":43,"column_end":83,"is_primary":false,"text":[{"text":"            let res = $crate::fmt::format($crate::__export::format_args!($($arg)*));","highlight_start":43,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":3134,"byte_end":3168,"line_start":101,"line_end":101,"column_start":20,"column_end":54,"is_primary":false,"text":[{"text":"        assert_eq!(format!(\"{}\", ticket.unwrap_err()), \"Title cannot be empty\");","highlight_start":20,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"format!","def_site_span":{"file_name":"/Users/sahithigaddam/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/macros.rs","byte_start":4518,"byte_end":4537,"line_start":125,"line_end":125,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! format {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__export::format_args!","def_site_span":{"file_name":"/Users/sahithigaddam/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":36127,"byte_end":36151,"line_start":1030,"line_end":1030,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Display` is not implemented for `TicketNewError`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `TicketNewError` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexercises/05_ticket_v2/09_error_trait/src/lib.rs:101:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        assert_eq!(format!(\"{}\", ticket.unwrap_err()), \"Title cannot be empty\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`TicketNewError` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Display` is not implemented for `TicketNewError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `title`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":695,"byte_end":700,"line_start":15,"line_end":15,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"fn easy_ticket(title: String, description: String, status: Status) -> Ticket {","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":695,"byte_end":700,"line_start":15,"line_end":15,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"fn easy_ticket(title: String, description: String, status: Status) -> Ticket {","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":"_title","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `title`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexercises/05_ticket_v2/09_error_trait/src/lib.rs:15:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn easy_ticket(title: String, description: String, status: Status) -> Ticket {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_title`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `description`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":710,"byte_end":721,"line_start":15,"line_end":15,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":"fn easy_ticket(title: String, description: String, status: Status) -> Ticket {","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":710,"byte_end":721,"line_start":15,"line_end":15,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":"fn easy_ticket(title: String, description: String, status: Status) -> Ticket {","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":"_description","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `description`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexercises/05_ticket_v2/09_error_trait/src/lib.rs:15:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn easy_ticket(title: String, description: String, status: Status) -> Ticket {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_description`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `status`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":731,"byte_end":737,"line_start":15,"line_end":15,"column_start":52,"column_end":58,"is_primary":true,"text":[{"text":"fn easy_ticket(title: String, description: String, status: Status) -> Ticket {","highlight_start":52,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"exercises/05_ticket_v2/09_error_trait/src/lib.rs","byte_start":731,"byte_end":737,"line_start":15,"line_end":15,"column_start":52,"column_end":58,"is_primary":true,"text":[{"text":"fn easy_ticket(title: String, description: String, status: Status) -> Ticket {","highlight_start":52,"highlight_end":58}],"label":null,"suggested_replacement":"_status","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `status`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexercises/05_ticket_v2/09_error_trait/src/lib.rs:15:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn easy_ticket(title: String, description: String, status: Status) -> Ticket {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_status`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
